#################################
#   Tutorial
#################################
#   For more details, there's a nice tutorial on Gnosis Docs https://docs.gnosis.io/protocol/docs/tutorial-telegram-bot/


#################################
#   Telegram Bot
#################################
#   Important: you need to create a bot that will notify your channel
#   The config instructs the bot how to authenticate in telegram, for which you will need to setup a token.
#   Keep reading to see how to create your own bot and token.
#   The process for creating a bot is super simple:
#       1. Go to https://t.me/BotFather
#       2. Add BotFather to your telegram
#       3. Enter /help command to get all the commands for the bot
#       4. Enter /newbot to create a new bot, follow the steps from BotFather
#       5. At the end of the process, BotFather will give you the authentication token that you will need for the config
#   Some additional info about Telegrm bots:
#       https://core.telegram.org/bots


# Telegram Authentication Token
TELEGRAM_TOKEN=1234567:asdfghjkl


#################################
#   Telegram Channel
#################################
#   Important: you will need your own Telegram channel so the bot can send messages there :) 
#   The config instructs the bot which channel it should report to.
#   You don't have a channel? Not a problem, just create one using any Telegram Client
#       https://telegram.org/faq_channels#q-what-39s-a-channel

# Telegram Channel
#   IMPORTANT: The bot should be an admin of the channel, and should have permission to post messages
TELEGRAM_CHANNEL_ID=@the-name-of-your-channel



#################################
#   Ethereum Node
################################# 
#   Setup your Ethereum Node such that it would allow you to subscribe to events in the contract.
#   It's important that the network of the node you are providing matches:
#       - The Gnosis Protocol Smart Contract Address (see below)
#       - The TCR address (see below)
#   This is because those settings are dependant on the network. For example, Gnosis Protocol is deployed both for 
#   Mainnet and Rinkeby, and therefore has different address for each network.

# Production Ethereum node
NODE_URL=wss://mainnet.infura.io/ws/v3/<your-api-key>

# Rinkeby Ethereum node
#NODE_URL=wss://rinkeby.infura.io/ws/v3/<your-api-key>

# Local/Ganache Ethereum node
#NODE_URL=ws://localhost:8545


#################################
#   CONTRACT: Gnosis Protocol
################################# 
#   Setup the address of Gnosis Protocol smart contract
#   It should be an instance of https://github.com/gnosis/dex-contracts/blob/master/contracts/BatchExchange.sol
#   Currently deployed in Mainnet and Rinkeby


# Production Gnosis Protocol
#   https://github.com/gnosis/dex-contracts/blob/master/networks.json
STABLE_COIN_CONTRACT_ADDRESS=0x6F400810b62df8E13fded51bE75fF5393eaa841F

# xDAO Gnosis Protocol
#   https://github.com/gnosis/dex-contracts/blob/master/networks.json
STABLE_COIN_CONTRACT_ADDRESS=0x25B06305CC4ec6AfCF3E7c0b673da1EF8ae26313

# Rinkeby Gnosis Protocol
#   https://github.com/gnosis/dex-contracts/blob/master/networks.json
#STABLE_COIN_CONTRACT_ADDRESS=0xC576eA7bd102F7E476368a5E98FA455d1Ea34dE2

# Local/Ganache Gnosis Protocol
#STABLE_COIN_CONTRACT_ADDRESS=0x67B5656d60a809915323Bf2C40A8bEF15A152e3e


#################################
#   TCR (Token Curated List)
################################# 
#  The TCR is a smart contract that contains a list of addresses that are whitelisted for the bot.
#  When the bot displays information about a token, if it is not trusted, would show an indication that it is not 
#  in his list, so the user should be double checking before filling that order.
#  The TCR should implement a basic interface:
#     function getTokens(uint256 _listId) public view returns (address[] memory) 
#  One implementation of a TCR is the one done by dxDAO:
#     https://github.com/nicoelzer/dxDAO-Token-Registry/blob/master/contracts/dxTokenRegistry.sol

# TCR - list of whitelisted tokens
# Mainnet: TCR - list of whitelisted tokens
TCR_CONTRACT_ADDRESS=0x93DB90445B76329e9ed96ECd74e76D8fbf2590d8

# Rinkeby: TCR - list of whitelisted tokens
#TCR_CONTRACT_ADDRESS=0xBb840456546496E7640DC09ba9fE06E67C157E1b

# TCR List Id
#   The TCR contracts contains multiple lists. Each list is identified by a number. 
#   This setting allow you to set this number
#   This setting is optional, it defaults to 0
# Mainnet TCR List Id
TCR_LIST_ID=1

# Rinkeby TCR List Id
#TCR_LIST_ID=0


#################################
#   WEB
################################# 
#   When the bot notifies for a new order, it generates a link that allows users to fill that order.
#   The link will take you to any instance of web https://github.com/gnosis/dex-react
#   Basically, anyone can fork that project, and customize a front end for Gnosis Protocol and setup a bot pointing at his web.

# Web used for Links in message - It can be any instance of this web:
#   https://github.com/gnosis/dex-react
WEB_BASE_URL=https://you-dex-react-web



#################################
#   Market/Tokens filtering
#################################
#   The bot will, by default, notify on every new order. 
#   This settings would allow you to subscribe to only the token or tokens you are interested in
#   Tokens are identified in Gnosis Protocol by an ID intrinsic to the protocol
#   For example, the ids for:
#     - USDC is 4
#     - DAI is 7
#   To get a complete list of tokens in the protocol, the easiest is to check it here:
#     - https://explore.duneanalytics.com/queries/1692


# Filter Tokens (optional)
#   If it's not specified it won't apply any filter
#   If it's specified it will show trades where either the sell token, or the buy token is the provided list
#   The expected value is a comma separated list of Ids (read above)
#TOKEN_IDS_FILTER=7,4


#################################
#   API Port
#################################
#   The bot will expose an API with some liveness probes endpoints 
#   This endpoints are useful for checking the health of the bots. 
#   This way, you can reboot the service if it becomes unhealthy. 
#   For example this could be used directly with Kubernetes liveness probes:
#       https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
#   Exposed by default in:
#       - http://localhost:3000/v1/health/ping
#       - http://localhost:3000/v1/health/healthy

# Port for the exposed API
#   The default port is 3000
API_PORT=3000
